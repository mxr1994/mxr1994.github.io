<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris</title>
  
  <subtitle>永远年轻，永远热泪盈眶。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mxr1994.github.io/"/>
  <updated>2018-09-25T18:00:21.847Z</updated>
  <id>http://mxr1994.github.io/</id>
  
  <author>
    <name>Chris</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue初学笔记</title>
    <link href="http://mxr1994.github.io/2018/09/24/Vue%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://mxr1994.github.io/2018/09/24/Vue初学笔记/</id>
    <published>2018-09-24T12:22:15.000Z</published>
    <updated>2018-09-25T18:00:21.847Z</updated>
    
    <content type="html"><![CDATA[<p><font size="5">什么是Vue.js</font> <excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><p>Vue.js 一个前端框架，是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方库，可以整合起来做大型项目的开发）</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h3><hr><ul><li>开发效率快</li><li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js</li><li>在Vue中，一个核心的概念就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑。</li></ul><h3 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h3><hr><ul><li>框架：是一套完整的解决方案，对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目<ul><li>node中的 express</li></ul></li><li>库(插件)：提供某一个小功能，对项目的侵入性小，如果某个库无法完成某些需求，可以很容易的切换到其他库实现需求。<ul><li><ol><li>从 jQuery 切换到 Zepto</li><li>从 EJS 切换到 art-template</li></ol></li></ul></li></ul><h3 id="Node-后端-中的MVC与前端中的MVVM之间的区别"><a href="#Node-后端-中的MVC与前端中的MVVM之间的区别" class="headerlink" title="Node(后端)中的MVC与前端中的MVVM之间的区别"></a>Node(后端)中的MVC与前端中的MVVM之间的区别</h3><hr><ul><li>MVC 是后端的分层开发概念</li><li>MVVM是前端视图层的概念，主要关注于视图层分离，也就是说MVVM把前端的视图层，分为了三部分，Model, View, VM ViewModel</li><li>为什么有了 MVC 还要有 MVVM</li></ul><h3 id="Vue-js-基本代码与-MVVM-之间的对应关系"><a href="#Vue-js-基本代码与-MVVM-之间的对应关系" class="headerlink" title="Vue.js 基本代码与  MVVM  之间的对应关系"></a>Vue.js 基本代码与  MVVM  之间的对应关系</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue的基本语法&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;!-- 导入Vue的包 --&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 将来 new 的Vue实列，会控制这个元素中的所有内容 --&gt;</span><br><span class="line">    &lt;!-- Vue 实例所控制的这个元素区域，就是我们的 V --&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 2. 创建一个Vue的实例</span><br><span class="line">        // 当我们导入包之后，在浏览器的内存中，就多了Vue 构造函数</span><br><span class="line">        // 我们 new 出来的这个 vm 对象，就是我们 MVVM 中的 VM 调度者</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;, // 表示 vm这个实例要去控制 id 为 app 的这个元素</span><br><span class="line">            // 表示当前我们 new 的这个 Vue 实列，要控制页面上的哪个区域</span><br><span class="line"></span><br><span class="line">            // data 就相当于 MVVM 中的 M 专门用来保存每个页面的数据的</span><br><span class="line">            data: &#123; // data 属性中，存放的是 el 中要用到的数据</span><br><span class="line">                msg: &apos;Hello World&apos; // 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上</span><br><span class="line">                // 不需要在手动操作DOM元素了</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        /*</span><br><span class="line">        * el: element 需要获取的元素，一定是html中的跟容器元素</span><br><span class="line">        * data: 用于数据的存储</span><br><span class="line">        */</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-指令之v-text和v-html"><a href="#Vue-指令之v-text和v-html" class="headerlink" title="Vue 指令之v-text和v-html"></a>Vue 指令之v-text和v-html</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Page Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;main.css&quot; /&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p&gt;+++++ &#123;&#123; msg &#125;&#125; -----&lt;/p&gt;</span><br><span class="line">        &lt;h4 v-text=&quot;msg&quot;&gt;这里的数据会被覆盖&lt;/h4&gt;</span><br><span class="line">        &lt;!-- </span><br><span class="line">            区别一：v-text使用属性的方式，所以默认是不存在闪烁的问题</span><br><span class="line">            区别二：v-text会覆盖元素中原本的内容，但是插值表达式 只会替换自己的这个占位符</span><br><span class="line">                不会把整个元素的内容清空</span><br><span class="line">         --&gt;</span><br><span class="line">         &lt;div v-html=&quot;msg2&quot;&gt;这里的内容和 v-text一样 会被覆盖&lt;/div&gt;</span><br><span class="line">         &lt;!-- v-html 也会覆盖里面的内容 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               msg: &apos;456&apos;,</span><br><span class="line">               msg2: &apos;&lt;h1&gt;v-html 可以把内容当作html代码来显示&lt;/h1&gt;&apos;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-指令之v-bind的学习"><a href="#Vue-指令之v-bind的学习" class="headerlink" title="Vue 指令之v-bind的学习"></a>Vue 指令之v-bind的学习</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Page Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;main.css&quot; /&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">         &lt;!-- v-bind: 是 Vue 中，提供的用于绑定属性的指令 --&gt;</span><br><span class="line">         &lt;input type=&quot;button&quot; value=&quot;按钮1&quot; v-bind:title=&quot;mytitle&quot;&gt;</span><br><span class="line">         &lt;!-- v-bind 中，可以写合法的js表达式 --&gt;</span><br><span class="line">         &lt;input type=&quot;button&quot; value=&quot;按钮2&quot; v-bind:title=&quot;mytitle + &apos;123&apos;&quot;&gt;</span><br><span class="line">         &lt;!-- v-bind: 可以被简写为 :要绑定的属性 --&gt;</span><br><span class="line">         &lt;input type=&quot;button&quot; value=&quot;按钮3&quot; :title=&quot;mytitle&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               msg: &apos;456&apos;,</span><br><span class="line">               msg2: &apos;&lt;h1&gt;v-html 可以把内容当作html代码来显示&lt;/h1&gt;&apos;,</span><br><span class="line">               mytitle: &apos;这是自定义的title&apos;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-指令之-v-on"><a href="#Vue-指令之-v-on" class="headerlink" title="Vue 指令之 v-on"></a>Vue 指令之 v-on</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Page Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;main.css&quot; /&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">         &lt;!-- v-html 也会覆盖里面的内容 --&gt;</span><br><span class="line">         &lt;!-- v-bind: 是 Vue 中，提供的用于绑定属性的指令 --&gt;</span><br><span class="line">         &lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle&quot;&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- Vue 中提供了 v-on: 事件绑定机制 --&gt;</span><br><span class="line">         &lt;input type=&quot;button&quot; value=&quot;按钮1&quot; :title=&quot;mytitle+&apos;123&apos;&quot; v-on:click=&quot;show&quot;&gt;</span><br><span class="line">         &lt;input type=&quot;button&quot; value=&quot;按钮2&quot; :title=&quot;mytitle+&apos;123&apos;&quot; v-on:mouseover=&quot;show&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">           el: &apos;#app&apos;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               msg: &apos;456&apos;,</span><br><span class="line">               msg2: &apos;&lt;h1&gt;v-html 可以把内容当作html代码来显示&lt;/h1&gt;&apos;,</span><br><span class="line">               mytitle: &apos;这是自定义的title&apos;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123; // 这个methods属性中定义了当前Vue实例所有可用的方法</span><br><span class="line">                show: function () &#123;</span><br><span class="line">                    alert(&apos;Hello&apos;)</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><ol><li>如何定义一个基本的Vue代码结构</li><li>插值表达式 和 v-text</li><li>v-cloak</li><li>v-html</li><li>v-bind   Vue提供的属性绑定机制   缩写是 :</li><li>v-on      Vue提供的事件绑定机制   缩写是 @</li></ol><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><hr><ul><li><code>.stop</code> 阻止冒泡</li><li><code>.prevent</code>阻止默认事件</li><li><code>.capture</code>添加事件侦听器时使用事件捕获模式</li><li><code>.self</code>只当事件在该元素本身(比如不是子元素)触发时触发回调</li><li><code>.once</code>事件只触发一次</li></ul><h3 id="Vue指令之-v-model-和-双向数据绑定"><a href="#Vue指令之-v-model-和-双向数据绑定" class="headerlink" title="Vue指令之 v-model 和 双向数据绑定"></a>Vue指令之 <code>v-model</code> 和 <code>双向数据绑定</code></h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h4&gt;&#123;&#123; msg &#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;!-- v-bind 只能实现数据的单项绑定 --&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-bind:value=&quot;msg&quot;&gt;</span><br><span class="line">        &lt;!-- 使用 v-model 指令，可以实现表单元素和 Model 中数据的双向数据绑定 --&gt;</span><br><span class="line">        &lt;!-- 注意: v-model 只能运用才 表单元素中 --&gt;</span><br><span class="line">        &lt;!-- input(radio text address email...) select checkbox textarea --&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                msg: &apos;大家好&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            method: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><hr><ul><li>迭代数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;list v-for=&quot;(item, i) in list&quot;&gt;索引值 : &#123;&#123;i&#125;&#125;---&gt;数据 : &#123;&#123;item&#125;&#125;&lt;/list&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p v-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;(item, i) in list&quot;&gt;索引值 : &#123;&#123;i&#125;&#125;---&gt;数据 : &#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                list: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">            &#125;,</span><br><span class="line">            method: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 循环遍历对象数组 --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p v-for=&quot;user in list&quot;&gt;&#123;&#123;user.id&#125;&#125; --- &#123;&#123;user.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;(user, i) in list&quot;&gt;Id : &#123;&#123;user.id&#125;&#125; --- Name : &#123;&#123;user.name&#125;&#125; --- Index : &#123;&#123;i&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                list: [</span><br><span class="line">                    &#123;id: 1, name: &apos;zs1&apos;&#125;,</span><br><span class="line">                    &#123;id: 2, name: &apos;zs2&apos;&#125;,</span><br><span class="line">                    &#123;id: 3, name: &apos;zs3&apos;&#125;,</span><br><span class="line">                    &#123;id: 4, name: &apos;zs4&apos;&#125;,</span><br><span class="line">                    &#123;id: 5, name: &apos;zs5&apos;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            method: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>迭代对象中的属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class="line">&lt;div v-for=&quot;(val, key, i) int userInfo&quot;&gt;</span><br><span class="line">    &#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p v-for=&quot;(val, key) in user&quot;&gt;Key : &#123;&#123; key &#125;&#125; --- Value : &#123;&#123; val &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- 在遍历对象身上的键值对的时候，除了 有 val key ，在第三个位置还有一个 索引 --&gt;</span><br><span class="line">        &lt;p v-for=&quot;(val, key, i) in user&quot;&gt;Key : &#123;&#123; key &#125;&#125; --- Value : &#123;&#123; val &#125;&#125; --- Index : &#123;&#123;i&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                user: &#123;</span><br><span class="line">                    id: 1,</span><br><span class="line">                    name: &apos;Chris&apos;,</span><br><span class="line">                    gender: &apos;男&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            method: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>迭代数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;i in 10&quot;&gt;</span><br><span class="line">    这是第 &#123;&#123;i&#125;&#125; 个标签</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- in 后面我们放过 普通数组，对象数组，对象，还可以放数字 --&gt;</span><br><span class="line">        &lt;!-- 注意：如果使用 v-for 迭代数字的话，前面的count值从 1 开始 --&gt;</span><br><span class="line">        &lt;p v-for=&quot;count in 10&quot;&gt;这是第 &#123;&#123; count &#125;&#125; 次循环&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                user: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            method: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>注意事项：</p><blockquote><p>2.2.0+ 的版本里，当在组建中使用v-for时，key现在是必须的</p></blockquote><ul><li><code>v-for</code> 循环的时候，key 属性只能使用<code>number</code>获取<code>string</code></li><li><code>key</code>在使用的时候，必须使用<code>v-bind</code>属性绑定的形式，制定<code>key</code>的值</li><li>在组件中，使用<code>v-for</code>循环的时候，或者在一些特殊情况中，如果<code>v-for</code>有问题，必须在使用<code>v-for</code>的同时，制定唯一的字符串/数字 类型 <code>:key</code> 值</li></ul><p>当<code>Vue.js</code>用<code>v-for</code>正在更新已渲染过的元素列表时，它默认用 <strong>就地复用</strong> 策略。如果数据项的顺序改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>，而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给<code>Vue</code>一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一<code>key</code>属性。</p><h3 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h3><hr><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;toggle&quot;&gt;</span><br><span class="line">        &lt;!-- v-if 的特点：每次都会重新删除或创建元素 --&gt;</span><br><span class="line">        &lt;!-- v-show 的特点：每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-if 有较高的切换性能消耗 --&gt;</span><br><span class="line">        &lt;!-- v-show 有较高的初始渲染消耗 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果元素涉及到频繁的切换，最好不要用 v-if, 而是推荐使用 v-show --&gt;</span><br><span class="line">        &lt;!-- 如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if --&gt;</span><br><span class="line">        &lt;h3 v-if=&quot;flag&quot;&gt;这是用v-if控制的元素&lt;/h3&gt;</span><br><span class="line">        &lt;h3 v-show=&quot;flag&quot;&gt;这是用v-show控制的元素&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                flag: true</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                toggle() &#123;</span><br><span class="line">                    this.flag = !this.flag</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>v-if 的特点<ul><li>有较高的切换性能消耗</li><li>每次都会重新删除或创建元素</li><li>如果元素可能永远也不会被显示出来被用户看到，推荐使用 v-if</li></ul></li><li>v-show 的特点<ul><li>每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式</li><li>有较高的初始渲染消耗</li><li>如果元素涉及到频繁的切换，推荐使用 v-show</li></ul></li></ul></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;5&quot;&gt;什么是Vue.js&lt;/font&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; &lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;Vue.js 一个前端框架，是一套构建用户界面的框架，&lt;strong&gt;只关注视图层&lt;/strong&gt;，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方库，可以整合起来做大型项目的开发）&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://mxr1994.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://mxr1994.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="前端" scheme="http://mxr1994.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://mxr1994.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>重装系统后如何恢复Hexo博客</title>
    <link href="http://mxr1994.github.io/2018/09/21/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8DHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://mxr1994.github.io/2018/09/21/重装系统后如何恢复Hexo博客/</id>
    <published>2018-09-21T03:15:30.000Z</published>
    <updated>2018-09-25T17:57:06.374Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>电脑用久后，难免会重装系统，在重装系统的时候我们的博客该怎么办呢？这里就记录一下如何恢复。</p><p>首先这篇文章的前提是保留了原有的博客文件夹，至于没有保留文件夹的方法，将在后续补上</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h5 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h5><p>首先，我们需要把git、Node和hexo重装一遍，因为重装系统后很有可能删除了配置文件，包括环境变量里面的东西，没有配置 name 和 email 的话，git 是无法正常工作的，所有首先需要重新配置 name 和 email 在git bash 里面输入下面两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name=<span class="string">"你的名字"</span></span><br><span class="line">git config --global user.email=<span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><p>记得要写<code>--global</code>我发现如果不写的话是没有用的，如果上面两条命令fail了的话，记得先用命令<code>git init</code>再输入上面两条命令，然后就是重新生成私匙并添加至git后测试链接。</p><p>生成私钥：<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code> </p><p> 接着按3个回车就好，中间你也可以输入密码，你随意，回车可以跳过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/Mr.Yang/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|    +E .         |</span></span><br><span class="line"><span class="string">| ..+oo+          |</span></span><br><span class="line"><span class="string">| oo+*+.o         |</span></span><br><span class="line"><span class="string">|o.*===+o         |</span></span><br><span class="line"><span class="string">|==+*... S        |</span></span><br><span class="line"><span class="string">|B.+.o .o         |</span></span><br><span class="line"><span class="string">|++o. +  .        |</span></span><br><span class="line"><span class="string">| +o.+ .          |</span></span><br><span class="line"><span class="string">|.  o.o           |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>.ssh目录下得到了两个文件：<code>id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</code><br>一般都在C盘你自己的所在用户目录下的<code>./ssh</code>文件夹中  </p><p><img src="/2018/09/21/重装系统后如何恢复Hexo博客/1.png" alt=""></p><p>接着我们就可以登陆自己的GitHub了，首先在GitHub的右上角用户哪里找到Settings</p><p><img src="/2018/09/21/重装系统后如何恢复Hexo博客/2.png" alt=""></p><p>然后在左边找到SSH and GPG keys</p><p><img src="/2018/09/21/重装系统后如何恢复Hexo博客/3.png" alt=""></p><p>最后new 一个ssh，把id_rsa.pub里面的全部内容放到里面，标题自定义，跟一开始设置博客的时候差不多 </p><p><img src="/2018/09/21/重装系统后如何恢复Hexo博客/4.png" alt=""></p><p>然后重新在git bash下输入命令检测是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?  # 直接输入yes</span></span><br><span class="line"><span class="string">Hi cnfeat! You'</span>ve successfully authenticated, but GitHub does not provide shell access</span><br></pre></td></tr></table></figure><p>只要之前的博客文件夹还在，此时就可以想以前一样继续使用自己的博客了。</p></the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; 

&lt;p&gt;电脑用久后，难免会重装系统，在重装系统的时候我们的博客该怎么办呢？这里就记录一下如何恢复。&lt;/p&gt;
&lt;p&gt;首先这篇文章的前提是保留了原有的博客文件夹，至于没有保留文件夹的方法，将在后续补上&lt;/p&gt;&lt;/excerpt&gt;
    
    </summary>
    
      <category term="博客折腾日记" scheme="http://mxr1994.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="博客折腾日记" scheme="http://mxr1994.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>if 如果 烟花</title>
    <link href="http://mxr1994.github.io/2018/09/17/%E7%83%9F%E8%8A%B1/"/>
    <id>http://mxr1994.github.io/2018/09/17/烟花/</id>
    <published>2018-09-16T17:24:42.000Z</published>
    <updated>2018-09-25T17:56:08.487Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>如果…可惜没如果…。</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>在车上，无意间响起来这首歌，想到去年的烟花，说实话，一部不错的动漫(据说被某电局剪的不像话)，想起以前的一些事情，很多事情，我们回想起来都会想，如果那时候我这样了，会怎么样，可是这个世界上没有如果，正如当时我们的选择，我相信当时的抉择都是正确的，正如我一直很鄙视渣男，但是如果我当时选择做一次渣男，她就不会嫁做他人妇，就不会像今天这样过的不好，如果当初我选择做一次渣男，也许就不会遇见严君，也许也就不会有这篇文章了，也许真的像如果那样，现在我心里更多的是自责。</p><p>说起动漫行业，就不得不说起日本，这是一个神奇的国度，那里有我的偶像公司，有一群认认真真做事的人，也有一群总是有一些稀奇古怪想法的人，当然也是对我们有民族仇恨的人，在这里，我不想为日本辩解什么，同时我也不想谈所谓的民族仇恨，我不是一个精日分子，但是日漫很多时候能给我们心底最纯粹的那一份感动，记得当时看烟花的时候就想起那些往事，我也想有一个那样的玻璃球，当我后悔做某项决定的时候，把它丢出去看看当我做出另外一个决定会是什么样子？会改变一些什么，虽然那只是一个虚幻的空间，回到现实还是那样，记得在结尾的时候，男主并没有来学校，很多人问，那男主这个时候去那了呢？是留在了自己创造出来的虚幻世界还是决定去寻找女主，去寻找弥补那段曾经做出的决定？我想，我更加倾向于后者，毕竟无数的东西，最终都要指向一个地方，那就是现实世界，我们总要为我们的所做的选择去肩负一些责任，去做点什么我们应该做的东西，即使这件事看起来很疯狂。</p><p>其实有的时候，正是这样的如果，才让我们感慨这个世界的变化无常，其实这个世界不需要如果，因为真正的生活是没有对与错的，我们只是在那个时候做了一个我们认为是最好的决定，只是它后来的走向并不是我们所期望的，但是这个时候也不用灰心丧气，无论是感情还是工作，即便它没有像我们预想的那么顺利，但是结局总是美好的，在一次次的抉择中，我们或许能获得更多的思考，在接下来的选择题中做得更好。</p><p>记得我有一个笔友，我们彼此不知道对方的姓名，不知道对方的IM，手机，更不用说见过面没有，我们用Email通讯已经一年了，在这个快节奏的生活中，还有人愿意发Email，真的是一件非常少见的事情了，记得有一次我们在邮件中讨论到对与错，选择与后悔的的问题，我说，其实随着年龄的成长，当我们越来越接触这个社会，我就慢慢地发现，原来真的在现实生活中，没有绝对的错与对之分，即便是那些十恶不赦的歹徒，他们真的是错误的吗？也许真相，比我们想象的更加复杂。</p><p>有时候我问自己，那么对于当初的决定，你后悔吗？也许曾经我后悔过，但是说实话，现在，我不会后悔，虽然我从小学升初中开始，在人生的关键道路上总是能走错一些路，而且某些事情可能确实是我这一辈子的遗憾(比如初中的那所学校)，但是不经历这些，你无法对这件事情有一个清晰的认识，同时我也相信，我大的方向终究是没有错误的，而且，后悔解决不了任何的事情，同时我的决定也并非不是正确的，我只是做了那个时候我认为是正确的事情，其实现在来看，也是最正确的决定，虽然它为我带来了不少的遗憾，但是我也收获了很多，我更应该珍惜的是眼前的生活、事与人。</p><p>不用想着重新来过，事实已经证明，你会把这件事情经营的很好或者糟糕，不需要再来一次，能做的，就是把未来做好，想想曾经的所作所为，想想曾经做的每一个决定，无论好或坏，它们都是最好的结果，你都能从中获得非常多的收获。</p><p>高中的时候，有个手机APP叫网秦杀毒，我记得当时和他们的微博运营部门的人无意间结识，当时她对我说了一句非常文艺，但也非常受用的话：</p><hr><blockquote><p>生活就像一道选择题，困扰我们的不是题目本身，而是这众多的选项。</p></blockquote><p>但是我此时也想在后面加一句</p><hr><blockquote><p>生活也不完全像一道选择题，因为它没有绝对的错与对，你的每一个选择，都是正确的，只是也许它的结果并不是你想要的。</p></blockquote><iframe frameborder="on" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=496869422&auto=1&height=66"></iframe><p><img src="/2018/09/17/烟花/1.jpg" alt="烟花歌词"></p></the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; 

&lt;p&gt;如果…可惜没如果…。&lt;/p&gt;&lt;/excerpt&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://mxr1994.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://mxr1994.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于这篇文章</title>
    <link href="http://mxr1994.github.io/2018/09/16/%E5%85%B3%E4%BA%8E%E5%9D%9A%E6%9E%9Cpro2S/"/>
    <id>http://mxr1994.github.io/2018/09/16/关于坚果pro2S/</id>
    <published>2018-09-16T03:47:07.000Z</published>
    <updated>2018-09-25T17:58:10.415Z</updated>
    
    <content type="html"><![CDATA[<p><font size="5">你好，世界</font> <excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><blockquote><p>通过干干净净地赚钱让人们相信干干净净的赚钱是可能的。通过实现理想让人们相信实现理想是可能的。通过改变世界让人们相信改变世界是可能的。即使是在中国。</p></blockquote><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>最早放这篇文章的主要目的是为了测试视频播放用的，毕竟有的时候看到一些比较喜欢的视频，有了什么感想就记录一下(比如《给游戏的一封情书》)，其实我本来是想讽刺一下那些天天在微信朋友圈感悟人生的人，我不知道你们哪来的这么多的鸡汤，看完鸡汤还能在哪里听着钢琴曲、小提琴曲、大提琴曲、中提琴曲、中偏大提琴曲、中偏小提琴曲… 然后留着眼泪，和<code>红颜知己</code>/<code>蓝颜知己</code>在微信上聊天，内容基本都是我尝试爱这个世界，但是这个世界却强奸了我，然后痛苦流涕，突然顿悟红尘，接着截九张图，放出聊天记录，证明自己的灵魂得到了升华。</p><p>这件事发生在我正在给你个朋友写E-mail的时候，所以我也就顺势说了一下这件事，说真的我真的深深的被这种事情恶心到了，如果你是真的在写生活体会，我会很尊重的，但是…..算了不说了，后来我写了一篇随笔，准备骂一下他们的，但是我发现这样不好，太不体面了，于是仿照他们的文笔写了一篇类似的朋友圈，但是鉴于要脸，我也不好意思贴上去，最后就有了这篇文章，其实真的写出来的时候也不在关于谁了，只是看到这个视频的时候突然想起两件事，一件事是我上面说的，还有一件是锤子科技五月十五号的发布会，说实话五月十五号的发布会确实让我记忆深刻，在武汉这么多年，我想唯一给我留下美好回忆的，也只有锤友这个群体，我们黑着老罗，黑着锤科，但是即便如此，我们依然爱着他们，就像我们爱着这个世界一样(我保证，世界没有强奸我们)。</p><p>当然这里我并不想把这两件事放在一起，毕竟两件事情是不一样的，这个视频也是在坚果Pro 2s 发布的时候，一个锤友做出来的，记得在这不久之前，也刚和一个锤友私下面基，当时聊了很多很有意思的话题，而且范围也非常广，所以后来我就在邮件中记录了这一次的见面，邮件全文如下：</p><p>记得以前，遇见和一个锤友面基，他是做保险的，吃饭的时候谈起手机，谈起过去，我说，老罗刚做手机的时候，我不知道老罗是老罗语录的那个老罗，当时只知道，这个胖子太TM装B了，也一直没有关注过这个人，后来我一个朋友说他从小米辞职，准备去锤子科技的时候，我才想起来这个几乎快被我遗忘的手机品牌，当时正值坚果pro的发布，看了发布会，软件交互让我眼前一亮，想起对他的第一映像，那天晚上一晚上看了所有的发布会，从OS，到M1，看着系统一步步的走到现在，我发现这胖子不仅装B，而且在装B至于居然真的能干这么多事情，于是坚果pro成了我用锤子的第一部手机，后来的坚果pro 2。 R1，不说一定是好东西，但一直在对未来的尝试上，似乎也只有他在做这件事情。</p><p>后来我半开玩笑的说，你知道吗？以前老罗救过我的命，或者说他和一个叫三上真司的日本人一起救过我的命，他问我怎么回事？我说初中的时候，那时候上了一个学校，在这个学校里面，看见了，经历了不少对我影响很大的事情，比如老师可以单纯的因为看你不爽整你人，学校不允许看书，人与人之间没有信任可言，同学之间可以因为你和我不是一派，整你人，我觉得一直以来我都是个理想主义者，从那个时候开始，慢慢的觉得生活无趣，转学也转不了，于是我买了把刀子，准备自杀，结果扎进手腕的时候，我想了想人间还有什么值得我留念的呢？思来想去，好像只有电脑里的《生化危机4》还没玩完，结果我就想，玩完自杀是一样的，结果就是这段时间，无意间听了老罗语录，很搞笑，也很有道理，就像那句话，人生的道路上，从来不曾充满荆棘，而是蹲满了各式各样的傻逼。</p><p>后来基本就是说着当年老罗说过的那些屁话，在互相伤害，毕竟前路还有更多的傻逼在等着我们。</p><p>我爱我们倒霉的工作，也爱这个千疮百孔的世界。</p><p>如果你试图放弃一个你知道是正确的事情的时候，希望你能再看看这句话。  永远年轻，永远热泪盈眶。</p><p>通往牛逼的路上，风景差的让人只想说脏话，但是创业者在意的是远方。</p><p>以傲慢与偏执回敬傲慢与偏见。</p><p>通过干干净净地赚钱让人们相信干干净净的赚钱是可能的。通过实现理想让人们相信实现理想是可能的。通过改变世界让人们相信改变世界是可能的。即使是在中国。</p><p>偏执于有用的细节，偏执于无用的细节，偏执于甚至不会被发现是有用还是无用的细节，这就是工匠精神。</p><p>我不是为了输赢，我就是认真。</p><iframe src="//player.bilibili.com/player.html?aid=30897984&cid=53946600&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="786"> </iframe></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;5&quot;&gt;你好，世界&lt;/font&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; &lt;/excerpt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过干干净净地赚钱让人们相信干干净净的赚钱是可能的。通过实现理想让人们相信实现理想是可能的。通过改变世界让人们相信改变世界是可能的。即使是在中国。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://mxr1994.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://mxr1994.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>struts2简介</title>
    <link href="http://mxr1994.github.io/2018/09/10/struts2%E7%AE%80%E4%BB%8B/"/>
    <id>http://mxr1994.github.io/2018/09/10/struts2简介/</id>
    <published>2018-09-10T10:20:09.000Z</published>
    <updated>2018-09-25T18:01:37.250Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>MVC框架原来比较流行的是struts1，和struts1一块儿的还有webwork。webwork技术上要比struts1要牛。但是由于struts1做的比较早，所以得到了大家伙儿的认可。所以用struts1的人还特别多。</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>　　这是就产生了一种现象：技术差的反而还比较流行。这是完全有可能的现象，社会上也有这样的东西，产品做的很烂，但是不会妨碍他卖的很好。</p><p>　　而struts1和webwork之间也存在这样的问题，struts1的技术其实要比webwork要差一点。后来struts1这么想说我的技术老这么差下去，也不是一回事儿。早晚要被webwork给干掉,怎么办？</p><p><img src="/2018/09/10/struts2简介/1.jpg" alt="这可咋办？"></p><p>算了，咱们俩商量商量，合一块儿得了。可是一块儿怎么合呢？主要还是用webwork的技术，但是名字换成struts，这就是struts2。所以struts1和struts2的区别是比较大的。</p></the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; 

&lt;p&gt;MVC框架原来比较流行的是struts1，和struts1一块儿的还有webwork。webwork技术上要比struts1要牛。但是由于struts1做的比较早，所以得到了大家伙儿的认可。所以用struts1的人还特别多。&lt;/p&gt;&lt;/excerpt&gt;
    
    </summary>
    
      <category term="struts1" scheme="http://mxr1994.github.io/categories/struts1/"/>
    
      <category term="struts2" scheme="http://mxr1994.github.io/categories/struts1/struts2/"/>
    
      <category term="webwork" scheme="http://mxr1994.github.io/categories/struts1/struts2/webwork/"/>
    
    
      <category term="struts1" scheme="http://mxr1994.github.io/tags/struts1/"/>
    
      <category term="struts2" scheme="http://mxr1994.github.io/tags/struts2/"/>
    
      <category term="webwork" scheme="http://mxr1994.github.io/tags/webwork/"/>
    
  </entry>
  
  <entry>
    <title>struct和typedef struct</title>
    <link href="http://mxr1994.github.io/2018/09/09/struct%E5%92%8Ctypedef-struct/"/>
    <id>http://mxr1994.github.io/2018/09/09/struct和typedef-struct/</id>
    <published>2018-09-08T17:57:21.000Z</published>
    <updated>2018-09-26T04:25:44.023Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>关于struct和typedef struct 看完后彻底明白了</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h4 id="分三块来描述"><a href="#分三块来描述" class="headerlink" title="分三块来描述"></a>分三块来描述</h4><ol><li><p>首先：<font color="red">//注意在C和C++里不同</font></p><font color="red">在C中定义一个结构体类型要用typedef:</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;Stu;</span><br></pre></td></tr></table></figure><p>于是在声明变量的时候就可以用<font color="red">Stu stu1;(如果没有typedef就必须用struct Student stu1;来声明)</font><br> 　　　　这里的<font color="red">Stu</font>实际上就是<font color="red">struct Student</font>的别名。<strong><font color="red">Stu==struct Student</font></strong><br> 　　　　<font color="red">另外这里也可以不写Student（于是也不能struct Student stu1;了，必须是Stu stu1;）</font> 　　　　</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;Stu;</span><br></pre></td></tr></table></figure><p>但在c++里很简单，直接 　　　　</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>于是就定义了结构体类型Student，声明变量时直接Student stu2；</p><hr><p>2.其次：<br> 　在c++中如果用typedef的话，又会造成区别： 　</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">Student</span>   </span></span><br><span class="line"><span class="class">&#123;</span>   </span><br><span class="line"><span class="keyword">int</span>   a;   </span><br><span class="line">&#125;stu1;<span class="comment">//stu1是一个变量  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>   <span class="class"><span class="keyword">struct</span>   <span class="title">Student2</span>   </span></span><br><span class="line"><span class="class">&#123;</span>   </span><br><span class="line"><span class="keyword">int</span>   a;   </span><br><span class="line">&#125;stu2;<span class="comment">//stu2是一个结构体类型=struct Student</span></span><br></pre></td></tr></table></figure><p>使用时可以直接访问stu1.a<br>但是stu2则必须先   stu2 s2;<br>然后               s2.a=10;</p><hr><p>3 掌握上面两条就可以了，不过最后我们探讨个没多大关系的问题<br> 　如果在c程序中我们写： 　</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;aaa,bbb,ccc;</span><br></pre></td></tr></table></figure><p> 　　这算什么呢？<br> 　　我个人观察编译器（VC6）的理解，这相当于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  </span></span><br><span class="line"><span class="class"> 　　&#123;</span></span><br><span class="line">       <span class="keyword">int</span> num;</span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line"> 　　&#125;aaa；</span><br><span class="line"> 　　<span class="keyword">typedef</span> aaa bbb;</span><br><span class="line"> 　　<span class="keyword">typedef</span> aaa ccc;</span><br></pre></td></tr></table></figure><p> 　　也就是说aaa,bbb,ccc三者都是结构体类型。声明变量时用任何一个都可以,在c++中也是如此。但是你要注意的是这个在c++中如果写掉了typedef关键字，那么aaa，bbb，ccc将是截然不同的三个对象。</p><p>　　//此处不是很理解。</p><p><strong>typedef struct**</strong>和struct<strong>**的区别：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> iNum;</span><br><span class="line">    <span class="keyword">long</span> lLength;</span><br><span class="line">&#125; MyStruct;</span><br></pre></td></tr></table></figure><p>　上面的tagMyStruct是标识符，MyStruct是变量类型（相当于（int,char等））。</p><p>这语句实际上完成两个操作：</p><p>1.定义一个新的结构类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span>　　 </span><br><span class="line">    <span class="keyword">int</span> iNum; </span><br><span class="line">    <span class="keyword">long</span> lLength; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析：tagMyStruct称为“tag”，即“标签”，实际上是一个临时名字，不论是否有typedefstruct 关键字和tagMyStruct一起，构成了这个结构类型，这个结构都存在。</p><p>　　我们可以用struct tagMyStruct varName来定义变量，但要注意，<font color="red">使用tagMyStruct varName来定义变量是不对的，因为struct 和tagMyStruct合在一起才能表示一个结构类型。</font></p><p>　　2) typedef为这个新的结构起了一个名字，叫MyStruct。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span> <span class="title">MyStruct</span>;</span></span><br></pre></td></tr></table></figure><p>　　因此，MyStruct实际上相当于struct tagMyStruct，我们可以使用MyStruct varName来定义变量。</p><p>　　2.　</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    <span class="keyword">int</span> iNum;</span><br><span class="line">    <span class="keyword">long</span> lLength;</span><br><span class="line">&#125; MyStruct;</span><br></pre></td></tr></table></figure><p>　在C中，这个申明后申请结构变量的方法有两种：</p><p>　（1）struct tagMyStruct 变量名</p><p>　（2）MyStruct 变量名</p><p>　在c++中可以有</p><p>　（1）struct tagMyStruct 变量名</p><p>　（2）MyStruct 变量名</p><p>　（3）tagMyStruct 变量名​ s</p></li></ol></the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; 

&lt;p&gt;关于struct和typedef struct 看完后彻底明白了&lt;/p&gt;&lt;/excerpt&gt;
    
    </summary>
    
      <category term="C" scheme="http://mxr1994.github.io/categories/C/"/>
    
      <category term="C++" scheme="http://mxr1994.github.io/categories/C/C/"/>
    
    
      <category term="C" scheme="http://mxr1994.github.io/tags/C/"/>
    
      <category term="C++" scheme="http://mxr1994.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Spring C/P 命名空间的使用和区别</title>
    <link href="http://mxr1994.github.io/2018/09/08/Spring%E4%B8%AD%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4p%E5%92%8Cc%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://mxr1994.github.io/2018/09/08/Spring中名称空间p和c的使用/</id>
    <published>2018-09-08T07:33:00.000Z</published>
    <updated>2018-09-25T18:05:15.101Z</updated>
    
    <content type="html"><![CDATA[<p><font size="5">名称空间p和c的使用</font> <excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><p>Spring2.0以后提供了xml命名空间。</p><p>P名称空间</p><p>C名称空间<br>首先它们不是真正的名称空间，是虚拟的。它是嵌入到spring内核中的。</p><p>使用p名称空间可以解决我们setter注入时<property>简化 </property></p><p>使用c名称空间可以解决我们构造器注入时<constructor-arg>简化</constructor-arg></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p><strong>Demo：</strong></p><p>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Dog [name="</span> + name + <span class="string">", color="</span> + color + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Dog dog)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.dog = dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dog = dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", dog.name="</span> + dog.getName() + <span class="string">" dog.color"</span> + dog.getColor() + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是Demo使用的两个类</p><p>接下来我们来写applicationContext.xml的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传统方式注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog1"</span> <span class="attr">class</span>=<span class="string">"com.test.p.Dog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"吉娃娃"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黄色"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- P命名空间方式的注入 简化上述操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog2"</span> <span class="attr">class</span>=<span class="string">"com.test.p.Dog"</span> <span class="attr">p:name</span>=<span class="string">"金毛"</span> <span class="attr">p:color</span>=<span class="string">"黄色"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 传统构造器注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog3"</span> <span class="attr">class</span>=<span class="string">"com.test.p.Dog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"藏獒"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"黑色"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用C名称空间来简化构造器注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog4"</span> <span class="attr">class</span>=<span class="string">"com.test.p.Dog"</span> <span class="attr">c:name</span>=<span class="string">"哈士奇"</span> <span class="attr">c:color</span>=<span class="string">"彩色"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">ref的使用</span></span><br><span class="line"><span class="comment">这个人叫张三，他有一只哈士奇，是彩色的</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.test.p.Person"</span> <span class="attr">p:name</span>=<span class="string">"张三"</span> <span class="attr">p:dog-ref</span>=<span class="string">"dog4"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了更加直观的看到他们之间的区别，我们将传统方式和c、p命名空间的方式都写了，并在接下来的test中进行调用，我们来观察它的执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Dog dog1 = (Dog)context.getBean(<span class="string">"dog1"</span>);</span><br><span class="line">System.out.println(dog1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Dog dog2 = (Dog)context.getBean(<span class="string">"dog2"</span>);</span><br><span class="line">System.out.println(dog2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Dog dog3 = (Dog)context.getBean(<span class="string">"dog3"</span>);</span><br><span class="line">System.out.println(dog3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Dog dog4 = (Dog)context.getBean(<span class="string">"dog4"</span>);</span><br><span class="line">System.out.println(dog4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Person p1 = (Person)context.getBean(<span class="string">"person"</span>);</span><br><span class="line">System.out.println(p1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来观察它们最后的执行结果：</p><p>Test1</p><p><img src="/2018/09/08/Spring中名称空间p和c的使用/img/Spring/CP/1.png"></p><p>Test2</p><p><img src="/2018/09/08/Spring中名称空间p和c的使用/img/Spring/CP/2.png"></p><p>Test3</p><p><img src="/2018/09/08/Spring中名称空间p和c的使用/img/Spring/CP/3.png"></p><p>Test4</p><p><img src="/2018/09/08/Spring中名称空间p和c的使用/img/Spring/CP/4.png"></p><p>Test5</p><p><img src="/2018/09/08/Spring中名称空间p和c的使用/img/Spring/CP/5.png"></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;5&quot;&gt;名称空间p和c的使用&lt;/font&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; &lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;Spring2.0以后提供了xml命名空间。&lt;/p&gt;
&lt;p&gt;P名称空间&lt;/p&gt;
&lt;p&gt;C名称空间&lt;br&gt;首先它们不是真正的名称空间，是虚拟的。它是嵌入到spring内核中的。&lt;/p&gt;
&lt;p&gt;使用p名称空间可以解决我们setter注入时&lt;property&gt;简化 &lt;/property&gt;&lt;/p&gt;
&lt;p&gt;使用c名称空间可以解决我们构造器注入时&lt;constructor-arg&gt;简化&lt;/constructor-arg&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://mxr1994.github.io/categories/Java/"/>
    
      <category term="Spring" scheme="http://mxr1994.github.io/categories/Java/Spring/"/>
    
    
      <category term="Java" scheme="http://mxr1994.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://mxr1994.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SQL语法顺序与解析顺序</title>
    <link href="http://mxr1994.github.io/2018/09/05/SQL%E8%AF%AD%E6%B3%95%E9%A1%BA%E5%BA%8F%E4%B8%8E%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/"/>
    <id>http://mxr1994.github.io/2018/09/05/SQL语法顺序与解析顺序/</id>
    <published>2018-09-05T09:14:47.000Z</published>
    <updated>2018-09-25T18:03:57.866Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>关于SQL的解析顺序，其实SQL的解析顺序和书写顺序是不一样的！！！</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h4 id="SQL：结构化查询语言"><a href="#SQL：结构化查询语言" class="headerlink" title="SQL：结构化查询语言"></a>SQL：结构化查询语言</h4><p>SQL是最重要的关系数据库操作语言，它是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><p>SQL基本上独立于数据库本身、使用的机器、网络、操作系统。<br>SQL的影响已经超出数据库领域，得到其他领域的重视和采用，如人工智能领域的数据检索，第四代软件开发工具中嵌入SQL的语言等。</p><p>有很多程序员都很抵触SQL，其实SQL语言是一整为数不多的声明性语言，只是它的运行方式完全不同于我们所熟知的命令行语言、面向对象的程序语言、甚至是函数语言。</p><h4 id="SQL是一种声明式语言"><a href="#SQL是一种声明式语言" class="headerlink" title="SQL是一种声明式语言"></a>SQL是一种声明式语言</h4><p>首先我们应该记住这个概念“声明”，SQL语言是为计算机声明了一个你想从原始数据中获得什么样的结果的一个范例，而不是告诉计算机如何能够得到结果。</p><p>SQL 语言声明的是结果集的属性，计算机会根据SQL 所声明的内容来从数据库中挑选出符合声明的数据，而不是像传统编程思维去指示计算机如何操作。</p><p>类似于，简单粗暴的对电脑说，嘿，电脑，把你上个月存进去的所有销售记录给我调出来。电脑：上个月的记录有….</p><pre><code>select * from pf_ckmx where rq &gt;= &apos;2016-12-23&apos; and rq &lt;= &apos;2017-01-22&apos;</code></pre><p>我们并不关心这些数据是怎么得来的，我们只是看看结果而已。</p><p>为什么很多程序员都很抵触SQL呢，主要原因是：我们潜意识中的是按照命令式编程的思维方式思考问题的。就好像这样：“电脑，先执行这一步，再执行那一步，但是在那之前先检查一下是否满足条件 A 和条件 B ”。例如，用变量传参、使用循环语句、迭代、调用函数等等，都是这种命令式编程的思维惯式。而SQL恰恰没有按照这种命令式编程的思维方式来处理问题。</p><h4 id="另外，最重要的是SQL的语法并不按照语法顺序执行的"><a href="#另外，最重要的是SQL的语法并不按照语法顺序执行的" class="headerlink" title="另外，最重要的是SQL的语法并不按照语法顺序执行的"></a>另外，最重要的是SQL的语法并不按照语法顺序执行的</h4><p>SQL语句有一个让大部分人都感到困惑的特性，就是：SQL语句的执行顺序跟其语句的语法顺序并不一致。SQL语句的语法顺序是：<br>​<br>    SELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY<br>为了方便理解，上面并没有把所有的 SQL 语法结构都列出来，但是已经足以说明 SQL 语句的语法顺序和其执行顺序完全不一样，就以上述语句为例，其执行顺序为：</p><pre><code>FROM → WHERE → GROUP BY → HAVING → SELECT → ORDER BY</code></pre><p>可以发现：SQL的语法并是不按照语法顺序执行，这让我们习惯于命令式编程的思维惯式</p><h4 id="关于SQL语句的执行顺序需要注意的地方"><a href="#关于SQL语句的执行顺序需要注意的地方" class="headerlink" title="关于SQL语句的执行顺序需要注意的地方"></a>关于SQL语句的执行顺序需要注意的地方</h4><ol><li>FROM 才是 SQL 语句执行的第一步，并非 SELECT 。数据库在执行 SQL 语句的第一步是将数据从硬盘加载到数据缓冲区中，以便对这些数据进行操作。</li></ol><ol start="2"><li>FROM才是SQL语句执行的第一步，并非SELECT。数据库在执行SQL语句的第一步是将数据从硬盘加载到数据缓冲区中，以便对这些数据进行操作。</li></ol><ol start="3"><li>SELECT是在大部分语句执行了之后才执行的，严格的说是在FROM和GROUP BY之后执行的。理解这一点是非常重要的，这就是你不能在WHERE中使用在SELECT中设定别名的字段作为判断条件的原因。</li></ol><p>当然这一点并非所有的数据库对SQL语句使用相同的解析方式。如MySQL、PostgreSQL和SQLite</p><h4 id="既然并不是所有的数据库都按照上述方式执行SQL预计，那有什么意义呢"><a href="#既然并不是所有的数据库都按照上述方式执行SQL预计，那有什么意义呢" class="headerlink" title="既然并不是所有的数据库都按照上述方式执行SQL预计，那有什么意义呢?"></a>既然并不是所有的数据库都按照上述方式执行SQL预计，那有什么意义呢?</h4><p>SQL语句的语法顺序和其执行顺序并不一致，这样我们就能避开一些一般性的错误，如果能记住SQL语句语法顺序和执行顺序的差异，那就已经可以轻松解决SQL的一些一般性问题了。</p><p>如果一种语言被设计成语法顺序直接反应其语句的执行顺序，那么这种语言对程序员是十分友好的，这种编程语言层面的设计理念已经被微软应用到了 LINQ 语言中</p></the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; 

&lt;p&gt;关于SQL的解析顺序，其实SQL的解析顺序和书写顺序是不一样的！！！&lt;/p&gt;&lt;/excerpt&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://mxr1994.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://mxr1994.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>你好，世界！</title>
    <link href="http://mxr1994.github.io/2018/09/01/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C%EF%BC%81/"/>
    <id>http://mxr1994.github.io/2018/09/01/你好，世界！/</id>
    <published>2018-09-01T11:48:50.000Z</published>
    <updated>2018-09-26T07:17:10.304Z</updated>
    
    <content type="html"><![CDATA[<p>我爱我们倒霉的工作，也爱这个千疮百孔的世界。<excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我爱我们倒霉的工作，也爱这个千疮百孔的世界。&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; &lt;/excerpt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://mxr1994.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://mxr1994.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mxr1994.github.io/2018/09/01/hello-world/"/>
    <id>http://mxr1994.github.io/2018/09/01/hello-world/</id>
    <published>2018-09-01T10:24:42.000Z</published>
    <updated>2018-09-26T04:24:22.220Z</updated>
    
    <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p></the></excerpt>]]></content>
    
    <summary type="html">
    
      &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt; 

&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/excerpt&gt;
    
    </summary>
    
      <category term="Java" scheme="http://mxr1994.github.io/categories/Java/"/>
    
      <category term="Spring" scheme="http://mxr1994.github.io/categories/Java/Spring/"/>
    
    
      <category term="Java" scheme="http://mxr1994.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://mxr1994.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
